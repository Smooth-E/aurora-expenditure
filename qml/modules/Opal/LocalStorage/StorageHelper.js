//@ This file is part of opal-localstorage.
//@ https://github.com/Pretty-SFOS/opal-localstorage
//@ SPDX-License-Identifier: GPL-3.0-or-later
//@ SPDX-FileCopyrightText: 2018-2025 Mirian Margiani
.pragma library
.import QtQuick.LocalStorage 2.0 as LS
var dbName="MyDatabase";var dbDescription="";var dbSize=2000000;var enableAutoMaintenance=true;var dbMigrations=[];var settingsTable="__local_settings";var maintenanceCallback=function(){};var databaseStatusSignal=null;var _lc="[Opal.LocalStorage] ";var _eventCounter=1;var _userEventCounter=1;function _notify(event,busy,data,__handle){if(!__handle){_eventCounter++;__handle=_eventCounter;}console.log(_lc+event,"["+__handle+"]",(busy?" (busy)":""),!!data?JSON.stringify(data):"");if(databaseStatusSignal instanceof Function){try{databaseStatusSignal(event,String(__handle),busy,data);}catch(e){console.error(_lc+"sending the status signal failed:","\n   ERROR  >",e,"\n   STACK  >\n",e.stack);}}return __handle;};function _notifyEnd(handle){_notify("end",false,null,handle);};function notify(event,busy,data,__handle){if(!__handle){_userEventCounter++;__handle=String("user-%1").arg(_userEventCounter);}return _notify(event,busy,data,__handle);};function notifyEnd(handle){_notify("end",false,null,handle);};var dbOk=true;var __initialized=false;var __db=null;function defaultFor(arg,val){return typeof arg!=="undefined"?arg:val;};function isSameValue(x,y){return x===y?x!==0||1/x===1/y:x!==x&&y!==y;};function getDatabase(){if(!dbOk){console.error("database is not available, check previous logs");throw new Error("database is not available, check previous logs");}if(!__initialized||__db===null){console.log("initializing database...");__db=LS.LocalStorage.openDatabaseSync(dbName,"",dbDescription,dbSize);if(__doInit(__db)){__initialized=true;dbOk=true;if(enableAutoMaintenance){__doDatabaseMaintenance();}}else{dbOk=false;}}return __db;};function readQuery(query,values){return simpleQuery(query,values,true);};function guardedTx(tx,callback){var res=null;try{tx.executeSql("SAVEPOINT __guarded_tx_started__;");res=callback(tx);tx.executeSql("RELEASE __guarded_tx_started__;");}catch(e){tx.executeSql("ROLLBACK TO __guarded_tx_started__;");console.error("guarded transaction failed:","\n   ERROR  >",e,"\n   CALLER >",e.stack);throw e;}return res;};function simpleQuery(query,values,readOnly){var db=getDatabase();var res={ok:false,rowsAffected:0,insertId:undefined,rows:[]};values=defaultFor(values,[]);if(!query){console.error("bug: cannot execute an empty database query");return res;}try{var callback=function(tx){var rs=null;if(readOnly===true){rs=tx.executeSql(query,values);}else{rs=guardedTx(tx,function(tx){return tx.executeSql(query,values);});}if(rs.rowsAffected>0){res.rowsAffected=rs.rowsAffected;}else{res.rowsAffected=0;}res.insertId=rs.insertId;res.rows=rs.rows;};if(readOnly===true){db.readTransaction(callback);}else{db.transaction(callback);}res.ok=true;}catch(e){console.error((readOnly===true?"read-only ":"")+"database query failed:","\n   ERROR  >",e,"\n   QUERY  >",query,"\n   VALUES >",values);_notify("query-failed",false,{exception:e,query:query,values:values});res.ok=false;}return res;};function setSetting(key,value){simpleQuery("INSERT OR REPLACE INTO %1 VALUES (?, ?);".arg(settingsTable),[key,value]);};function getSetting(key,fallback){var res=simpleQuery("SELECT value FROM %1 WHERE key=? LIMIT 1;".arg(settingsTable),[key]);if(res.rows.length>0){res=defaultFor(res.rows.item(0).value,fallback);}else{res=fallback;}return res;};function createSettingsTable(tx){guardedTx(tx,function(tx){tx.executeSql("CREATE TABLE IF NOT EXISTS %1 (key TEXT UNIQUE, value TEXT);".arg(settingsTable));});};function makeTableSortable(tx,tableName,orderColumn){if(!(!!tableName)||typeof tableName!="string"||false){throw new Error("Table name must be a string starting with "+"an underscore ('_'), got '%1'".arg(tableName));}var viewName=tableName.toString().slice(1);if(!(!!orderColumn)||typeof orderColumn!="string"){throw new Error("Order column must be a string, got '%1'".arg(orderColumn));}var columns=[];var rs=tx.executeSql("SELECT name FROM pragma_table_info(\"%1\") as info;".arg(tableName));for(var i=0;i<rs.rows.length;++i){var name=rs.rows.item(i).name.toString();if(name!==orderColumn){columns.push(name);}}if(columns.length===0){throw new Error("Table '%1' must have at least one column "+"other than the order column".arg(tableName));}var columnsString=columns.join(", ");var newColumnsString="NEW."+columns.join(", NEW.");tx.executeSql("        CREATE VIEW %1 AS SELECT * FROM %2;\n    ".arg(viewName).arg(tableName));tx.executeSql("        CREATE TRIGGER %1_ins_err INSTEAD OF INSERT ON %1\n        WHEN NEW.%3 < 1 OR NEW.%3 > (SELECT COUNT()+1 FROM %2) OR CAST(NEW.%3 AS INT) <> NEW.%3\n        BEGIN\n            SELECT RAISE(ABORT, \"Invalid index!\");\n        END;\n    ".arg(viewName).arg(tableName).arg(orderColumn));tx.executeSql("        CREATE TRIGGER %1_ins INSTEAD OF INSERT ON %1\n        WHEN NEW.%3 BETWEEN 1 AND (SELECT COUNT() FROM %2)+1\n        BEGIN\n            UPDATE %2 SET %3 = %3 + 1 WHERE %3 >= NEW.%3;\n            INSERT INTO %2(%4, %3) VALUES(%5, NEW.%3);\n        END;\n    ".arg(viewName).arg(tableName).arg(orderColumn).arg(columnsString).arg(newColumnsString));tx.executeSql("        CREATE TRIGGER %1_ins_last INSTEAD OF INSERT ON %1\n        WHEN NEW.%3 IS NULL\n        BEGIN\n            INSERT INTO %2(%4, %3) VALUES(%5, (SELECT COUNT()+1 FROM %2));\n        END;\n    ".arg(viewName).arg(tableName).arg(orderColumn).arg(columnsString).arg(newColumnsString));tx.executeSql("        CREATE TRIGGER %1_del INSTEAD OF DELETE ON %1\n        BEGIN\n            DELETE FROM %2 WHERE %3 = OLD.%3;\n            UPDATE %2 SET %3 = %3 - 1 WHERE %3>OLD.%3;\n        END;\n    ".arg(viewName).arg(tableName).arg(orderColumn));tx.executeSql("        CREATE TRIGGER %1_upd_err INSTEAD OF UPDATE OF %3 ON %1\n        WHEN NEW.%3 NOT BETWEEN 1 AND (SELECT COUNT() FROM %2) OR CAST(NEW.%3 AS INT)<>NEW.%3 OR NEW.%3 IS NULL\n        BEGIN\n            SELECT RAISE(ABORT, \"Invalid index!\");\n        END;\n    ".arg(viewName).arg(tableName).arg(orderColumn));tx.executeSql("        CREATE TRIGGER %1_upd_up INSTEAD OF UPDATE OF %3 ON %1\n        WHEN NEW.%3 BETWEEN OLD.%3+1 AND (SELECT COUNT() FROM %2)\n        BEGIN\n            UPDATE %2 SET %3 = NULL WHERE %3 = OLD.%3;\n            UPDATE %2 SET %3 = %3 - 1 WHERE %3 BETWEEN OLD.%3 AND NEW.%3;\n            UPDATE %2 SET %3 = NEW.%3 WHERE %3 IS NULL;\n        END;\n    ".arg(viewName).arg(tableName).arg(orderColumn));tx.executeSql("        CREATE TRIGGER %1_upd_down INSTEAD OF UPDATE OF %3 ON %1\n        WHEN NEW.%3 BETWEEN 1 AND OLD.%3-1\n        BEGIN\n            UPDATE %2 SET %3 = NULL WHERE %3 = OLD.%3;\n            UPDATE %2 SET %3 = %3 + 1 WHERE %3 BETWEEN NEW.%3 AND OLD.%3;\n            UPDATE %2 SET %3 = NEW.%3 WHERE %3 IS NULL;\n        END;\n    ".arg(viewName).arg(tableName).arg(orderColumn));};function __doInit(db){var latestVersion=dbMigrations[dbMigrations.length-1][0];var initialVersion=db.version;var previousVersion=Number(initialVersion);var nextVersion=null;var handle=null;if(initialVersion===""){console.log("initializing a new database...");db.transaction(createSettingsTable);handle=_notify("init",true);}else if(!!latestVersion&&initialVersion<latestVersion){handle=_notify("upgrade",true,{from:initialVersion,to:latestVersion});}else if(!!latestVersion&&initialVersion!==String(latestVersion)){handle=_notify("invalid-version",false,{got:initialVersion,expected:latestVersion});return false;}if(initialVersion!==String(latestVersion)){for(var i in dbMigrations){nextVersion=dbMigrations[i][0];if(previousVersion<nextVersion){try{console.log("migrating database to version",nextVersion);db.changeVersion(db.version,nextVersion,function(tx){guardedTx(tx,function(tx){var migrationType=typeof dbMigrations[i][1];if(migrationType==="string"){tx.executeSql(dbMigrations[i][1]);}else if(migrationType==="function"){dbMigrations[i][1](tx);}else{throw new Error("expected migration as string or function, got "+migrationType+" instead");}});});}catch(e){console.error("fatal: failed to upgrade database version from",previousVersion,"to",nextVersion);console.error("exception:\n",e);db.changeVersion(db.version,previousVersion,function(tx){});_notify("upgrade-failed",false,{from:previousVersion,to:nextVersion,exception:e});break;}previousVersion=nextVersion;}}}if(!!handle){_notifyEnd(handle);}if(previousVersion!==latestVersion){console.error("fatal: expected database version",String(latestVersion),"but loaded database has version",previousVersion);_notify("invalid-version");return false;}console.log("loaded database version",previousVersion);return true;};function __vacuumDatabase(){var db=getDatabase();try{db.transaction(function(tx){tx.executeSql("END TRANSACTION;");tx.executeSql("VACUUM;");});}catch(e){console.error("database vacuuming failed:\n",e);}};function __doDatabaseMaintenance(){var last_maintenance=simpleQuery("SELECT * FROM %1 WHERE key = \"last_maintenance\"              AND value >= date(\"now\", \"-60 day\") LIMIT 1;".arg(settingsTable),[],true);if(last_maintenance.rows.length>0){return;}console.log("running regular database maintenance...");var handle=_notify("maintenance",true);if(maintenanceCallback instanceof Function){try{maintenanceCallback();}catch(e){console.error("custom database maintenance failed:","\n   ERROR  >",e,"\n   STACK  >\n",e.stack);}}__vacuumDatabase();console.log("maintenance finished");setSetting("last_maintenance",new Date().toISOString());_notifyEnd(handle);};